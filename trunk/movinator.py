#!/usr/bin/env python2.5
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Sun Aug  3 17:44:49 2008

import wx
import wx.grid

# begin wxGlade: extracode
# end wxGlade


import dbaccess
from recom import Recommender, GMRecommender
from freqrecom import FreqRecommender


# --- constants ---------

MOVIEDB = "moviedb.db"

STATUS = {1: "IT", 2: "OT", 3: "S", 4: "FF"}

RSTATUS = {"IT": 1, "OT": 2, "S": 3, "FF": 4}

RECOMS = [("Recommender", ), ("GMRecommender", ), ("FreqRecommender", "'freqs.stat'")]

FIELDS = ["status", "title", "year", "director", "original_title", "rating"]

# -----------------------

# --- state variables ---

class StateVars:

    def __init__(self):

        # stores (mid, column) pairs of edited cells. mid is a unicode object.
        self.edited = []

        # stored the mid (unicode) of the deleted movies.
        self.deleted = []

        # count of movies inserted
        self.new_count = 0

        # recommender to use
        self.recom = None

        # active status filters (to filter out)
        #self.filters = ["IT", "OT", "S", "FF", ""]
        self.filters = []

        # last visible (not filtered) row
        self.last_visible = None

        # first visible (not filtered) row
        self.first_visible = None

        # last action performed (for undo): 1 - edit, 2 - delete
        self.last_action = None

        # info from last action (for undo): 
        #   edit - row, col, old value
        #   delete - row, row values
        self.last_info = None

state = StateVars()

# -----------------------

# --- aux funtcions -----

def processNull(value):
    if value is None:
        return ""
    else:
        return value

def processNone(value):
    if value == "":
        return None
    else:
        return value

def fillGrid(grid, db):
    """Fills the grid with data from the movie database."""
    if grid.GetNumberRows() > 0:
        grid.DeleteRows(0, grid.GetNumberRows())
    for m in db.listMovies():
        grid.AppendRows(1)
        grid.SetRowLabelValue(grid.GetNumberRows()-1, str(m["mid"]))
        grid.SetCellValue(grid.GetNumberRows()-1, 0, STATUS[m["status"]])
        grid.SetCellValue(grid.GetNumberRows()-1, 1, m["title"])
        grid.SetCellValue(grid.GetNumberRows()-1, 2, str(processNull(m["year"])))
        grid.SetCellValue(grid.GetNumberRows()-1, 3, processNull(m["director"]))
        grid.SetCellValue(grid.GetNumberRows()-1, 4, processNull(m["original_title"]))
        grid.SetCellValue(grid.GetNumberRows()-1, 5, str(processNull(m["rating"])))
        for r in m["ratings"]:
            grid.SetCellValue(grid.GetNumberRows()-1, r[0] + 5, str(r[1]))
            grid.SetCellValue(grid.GetNumberRows()-1, 11, str(state.recom.score(m)))

    grid.SetColMinimalAcceptableWidth(10)
    grid.AutoSizeColumn(0)
    grid.AutoSizeColumn(5)
    grid.SetColSize(6,40)
    grid.SetColSize(7,40)
    grid.SetColSize(8,40)
    grid.SetColSize(9,40)
    grid.SetColSize(10,40)
    grid.AutoSizeColumn(11)

    state.last_visible = grid.GetNumberRows()-1
    state.first_visible = 0

def saveGrid(grid, db):
    """Saves the changes in the grid to the database."""
#    print state.edited
    for m in state.edited:
        r = findMovie(grid, m[0])
        if m[1] == 0:
            db.updateMovie(m[0], FIELDS[m[1]], RSTATUS[grid.GetCellValue(r, m[1])])
        else: 
            if m[1] <= 5:
#                print m[0]
#                print FIELDS[m[1]]
#                print grid.GetCellValue(r, m[1])
#                print RSTATUS[grid.GetCellValue(r, m[1])]
                db.updateMovie(m[0], FIELDS[m[1]], grid.GetCellValue(r, m[1]))
            else:
                if grid.GetCellValue(r, m[1]) == "":
                    db.delRating(m[0], m[1] - 5)
                else:
                    db.updateRating(m[0], m[1] - 5, grid.GetCellValue(r, m[1]))
        grid.SetCellBackgroundColour(r, m[1], wx.WHITE)
    
    for m in state.deleted:
        db.delMovie(m)

    if state.new_count > 0:
        for i in xrange(grid.GetNumberRows()):
            if "+" in grid.GetRowLabelValue(i):
                mid = db.insMovie(
                    processNone(grid.GetCellValue(i, 1)),
                    processNone(grid.GetCellValue(i, 2)),
                    processNone(grid.GetCellValue(i, 3)),
                    processNone(grid.GetCellValue(i, 4)),
                    processNone(grid.GetCellValue(i, 5)),
                    RSTATUS[grid.GetCellValue(i, 0)])
                for j in xrange(1,6):
                    if grid.GetCellValue(i, j + 5) != "":
                        db.updateRating(
                            mid,
                            j,
                            grid.GetCellValue(i, j + 5))
                grid.SetRowLabelValue(i, str(mid))
                for j in xrange(grid.GetNumberCols()):
                    paintCell(grid, str(mid), i, j)

    grid.ForceRefresh()

def sortGrid(grid, col, rev):
    """Sorts the data, ascending, in the grid according to the given
    column. This is done by building a list with the grid contents, sorting the
    list, and copying it back to the grid."""
    l = []
    for i in xrange(grid.GetNumberRows()):
        m = [grid.GetRowLabelValue(i)]
        for t in xrange(grid.GetNumberCols()):
            m.append(grid.GetCellValue(i, t))
        l.append(m)
    l.sort(key=lambda x: x[col+1], reverse=rev)
    for i, m in enumerate(l):
        mid = m.pop(0)
        grid.SetRowLabelValue(i, mid)
        for j, t in enumerate(m):
            grid.SetCellValue(i, j, t)
            paintCell(grid, mid, i, j)
    hideRows(grid)

def paintCell(grid, mid, i, j):
    """Paints the cell red if it was edited or is new, white otherwise."""
    if ("+" in mid) or ((mid, j) in state.edited):
        grid.SetCellBackgroundColour(i, j, wx.RED)
    else:
        grid.SetCellBackgroundColour(i, j, wx.WHITE)

def shiftRows(grid, row):
    """Shifts all rows upward, overwriting the given row. This is needed
    because if I just use the DeleteRow method, the labels are not updated
    properly."""
    for i in xrange(row + 1, grid.GetNumberRows()):
        grid.SetRowLabelValue(i - 1, grid.GetRowLabelValue(i))
        for j in xrange(grid.GetNumberCols()):
            grid.SetCellValue(i - 1, j, grid.GetCellValue(i, j))
            paintCell(grid, grid.GetRowLabelValue(i - 1), i - 1, j)
    (row, col) = (grid.GetGridCursorRow(), grid.GetGridCursorCol())
    if row == grid.GetNumberRows()-1:
        row = row - 1
    grid.DeleteRows(grid.GetNumberRows()-1)
    grid.SetGridCursor(row, col)
    hideRows(grid)

def unshiftRows(grid, row):
    """Does the inverse of shiftRows."""
    grid.AppendRows(1)
    for i in xrange(grid.GetNumberRows() - 1, row, -1):
        grid.SetRowLabelValue(i, grid.GetRowLabelValue(i - 1))
        for j in xrange(grid.GetNumberCols()):
            grid.SetCellValue(i, j, grid.GetCellValue(i - 1, j))
            paintCell(grid, grid.GetRowLabelValue(i), i, j)
    col = grid.GetGridCursorCol()
    grid.SetGridCursor(row, col)
    hideRows(grid)

def chooseRecom(rec, db):
    """Creates a new recommender object, from those in the RECOMS list."""
    recString = RECOMS[rec][0] + "(db"
    if len(RECOMS[rec]) > 1:
        recString = recString + ", " + ", ".join(RECOMS[rec][1:])
    recString = recString + ")"
    state.recom = eval(recString)
#    print state.recom

def reScore(grid, db):
    """Recomputes all recommendations."""
    for i in xrange(grid.GetNumberRows()):
        if "+" not in grid.GetRowLabelValue(i):
            m = db.getMovie(grid.GetRowLabelValue(i))
            if len(m["ratings"]) > 0:
                grid.SetCellValue(i, 11, str(state.recom.score(m)))

def isVisible(grid, row):
    """Checks if a cell is visible, according to the status filters."""
    return grid.GetCellValue(row, 0) not in state.filters

def hideRows(grid):
    """Hides all rows that do not have the status field as in the fiven
    filters."""
    row = grid.GetGridCursorRow()
    state.first_visible = 0
    state.last_visible = 0
    for i in xrange(grid.GetNumberRows()):
        if isVisible(grid, i):
            grid.SetRowSize(i, grid.GetDefaultRowSize())
            state.last_visible = i
        else:
            grid.SetRowSize(i, 0)
            if row == i:
                row = row + 1
            if state.first_visible == i:
                state.first_visible = state.first_visible + 1
    if state.last_visible < row:
        row = state.last_visible
    grid.ForceRefresh()
    grid.SetGridCursor(row, grid.GetGridCursorCol())
    grid.MakeCellVisible(row, grid.GetGridCursorCol())

def toggleFilter(checked, filter):
    """Toggles a given status filter on or off."""
    if checked and (filter in state.filters):
        state.filters.remove(filter)
    elif not checked and (filter not in state.filters):
        state.filters.append(filter)

def findMovie(grid, mid):
    """Given a movie id, returns the row number in the grid where the movie
    is. Returns None if it is not found."""
    for r in xrange(grid.GetNumberRows()):
        if grid.GetRowLabelValue(r) == mid:
            return r
    return None

# -----------------------



class Movinator(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: Movinator.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_2 = wx.Panel(self, -1)
        self.panel_3 = wx.Panel(self, -1)
        self.panel_1 = wx.Panel(self, -1)
        self.label_1 = wx.StaticText(self, -1, "The Movinator", style=wx.ALIGN_CENTRE)
        self.grid_1 = wx.grid.Grid(self, -1, size=(1, 1))
        self.button_1 = wx.Button(self.panel_1, -1, "New")
        self.button_2 = wx.Button(self.panel_1, -1, "Delete")
        self.choice_1 = wx.Choice(self.panel_1, -1, choices=[])
        self.button_3 = wx.Button(self.panel_1, -1, "Recalc")
        self.button_5 = wx.Button(self.panel_1, -1, "Undo")
        self.checkbox_1 = wx.CheckBox(self.panel_3, -1, "In theaters")
        self.checkbox_2 = wx.CheckBox(self.panel_3, -1, "Off theaters")
        self.checkbox_3 = wx.CheckBox(self.panel_3, -1, "Seen")
        self.checkbox_4 = wx.CheckBox(self.panel_3, -1, "For free")
        self.button_4 = wx.Button(self.panel_2, -1, "Save")
        self.button_7 = wx.Button(self.panel_2, -1, "Revert")
        self.button_6 = wx.Button(self.panel_2, -1, "Quit")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.grid.EVT_GRID_CMD_LABEL_LEFT_CLICK, self.sort, self.grid_1)
        self.Bind(wx.grid.EVT_GRID_CMD_CELL_CHANGE, self.edit, self.grid_1)
        self.Bind(wx.grid.EVT_GRID_CMD_EDITOR_SHOWN, self.editStart, self.grid_1)
        self.Bind(wx.grid.EVT_GRID_CMD_LABEL_RIGHT_CLICK, self.sortRev, self.grid_1)
        self.Bind(wx.grid.EVT_GRID_CMD_SELECT_CELL, self.select, self.grid_1)
        self.Bind(wx.EVT_BUTTON, self.new, self.button_1)
        self.Bind(wx.EVT_BUTTON, self.delete, self.button_2)
        self.Bind(wx.EVT_CHOICE, self.changeRecommender, self.choice_1)
        self.Bind(wx.EVT_BUTTON, self.recalc, self.button_3)
        self.Bind(wx.EVT_BUTTON, self.undo, self.button_5)
        self.Bind(wx.EVT_CHECKBOX, self.filter1, self.checkbox_1)
        self.Bind(wx.EVT_CHECKBOX, self.filter2, self.checkbox_2)
        self.Bind(wx.EVT_CHECKBOX, self.filter3, self.checkbox_3)
        self.Bind(wx.EVT_CHECKBOX, self.filter4, self.checkbox_4)
        self.Bind(wx.EVT_BUTTON, self.save, self.button_4)
        self.Bind(wx.EVT_BUTTON, self.revert, self.button_7)
        self.Bind(wx.EVT_BUTTON, self.quit, self.button_6)
        # end wxGlade

        # Open the databse
        self.dba = dbaccess.DBAccess(MOVIEDB)

        # Further grid format
        self.ignore_select = True
        self.previous_cell = (0,0)

        self.grid_1.SetRowMinimalAcceptableHeight(0)
        self.grid_1.SetGridCursor(0, 0)
        self.grid_1.SetFocus()

        # Reccomendation column is read only
        at = self.grid_1.GetOrCreateCellAttr(0, 0).Clone()
        at.SetReadOnly(True)
        self.grid_1.SetColAttr(11, at)

        # Number editor for years
        at = self.grid_1.GetOrCreateCellAttr(0, 0).Clone()
        at.SetEditor(wx.grid.GridCellNumberEditor(0,9999))
        self.grid_1.SetColAttr(2, at)

        # Choice editor for ratings
        at = self.grid_1.GetOrCreateCellAttr(0, 0).Clone()
        at.SetEditor(wx.grid.GridCellChoiceEditor(["", "0", "1", "2", "3", "4", "5"]))
        self.grid_1.SetColAttr(5, at)
        self.grid_1.SetColAttr(6, at)
        self.grid_1.SetColAttr(7, at)
        self.grid_1.SetColAttr(8, at)
        self.grid_1.SetColAttr(9, at)
        self.grid_1.SetColAttr(10, at)

        # Choice editor for status
        at = self.grid_1.GetOrCreateCellAttr(0, 0).Clone()
        at.SetEditor(wx.grid.GridCellChoiceEditor(STATUS.values()))
        self.grid_1.SetColAttr(0, at)

        # Fills the list of recommenders
        for r in RECOMS:
            self.choice_1.Append(r[0])
        self.choice_1.Select(0)
        chooseRecom(0, self.dba)

        # Puts the intials of the critics in the columns
        for i, c in enumerate(self.dba.getCritics()):
            self.grid_1.SetColLabelValue(i + 6, c[1])

        # Fills the grid with movies from the database
        fillGrid(self.grid_1, self.dba)

        # No undo information
        self.last_edit = None
        self.enableUndo(False)

    def __set_properties(self):
        # begin wxGlade: Movinator.__set_properties
        self.SetTitle("The Movinator")
        self.grid_1.CreateGrid(0, 12)
        self.grid_1.SetRowLabelSize(30)
        self.grid_1.SetColLabelSize(30)
        self.grid_1.EnableDragRowSize(0)
        self.grid_1.EnableDragGridSize(0)
        self.grid_1.SetColLabelValue(0, "Status")
        self.grid_1.SetColSize(0, 10)
        self.grid_1.SetColLabelValue(1, "Ttile")
        self.grid_1.SetColSize(1, 300)
        self.grid_1.SetColLabelValue(2, "Year")
        self.grid_1.SetColSize(2, 10)
        self.grid_1.SetColLabelValue(3, "Director")
        self.grid_1.SetColSize(3, 150)
        self.grid_1.SetColLabelValue(4, "Original title")
        self.grid_1.SetColSize(4, 300)
        self.grid_1.SetColLabelValue(5, "Rating")
        self.grid_1.SetColSize(5, 10)
        self.grid_1.SetColLabelValue(6, "R1")
        self.grid_1.SetColSize(6, 10)
        self.grid_1.SetColLabelValue(7, "R2")
        self.grid_1.SetColSize(7, 10)
        self.grid_1.SetColLabelValue(8, "R3")
        self.grid_1.SetColSize(8, 10)
        self.grid_1.SetColLabelValue(9, "R4")
        self.grid_1.SetColSize(9, 10)
        self.grid_1.SetColLabelValue(10, "R5")
        self.grid_1.SetColSize(10, 10)
        self.grid_1.SetColLabelValue(11, "Recommendation")
        self.grid_1.SetColSize(11, 10)
        self.grid_1.SetMinSize((956, 400))
        self.checkbox_1.SetValue(1)
        self.checkbox_2.SetValue(1)
        self.checkbox_3.SetValue(1)
        self.checkbox_4.SetValue(1)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: Movinator.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(self.label_1, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 10)
        sizer_1.Add(self.grid_1, 1, wx.ALL|wx.EXPAND, 5)
        sizer_3.Add(self.button_1, 0, 0, 0)
        sizer_3.Add(self.button_2, 0, 0, 0)
        sizer_3.Add(self.choice_1, 0, 0, 0)
        sizer_3.Add(self.button_3, 0, 0, 0)
        sizer_3.Add(self.button_5, 0, 0, 0)
        self.panel_1.SetSizer(sizer_3)
        sizer_1.Add(self.panel_1, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 10)
        sizer_4.Add(self.checkbox_1, 0, 0, 0)
        sizer_4.Add(self.checkbox_2, 0, 0, 0)
        sizer_4.Add(self.checkbox_3, 0, 0, 0)
        sizer_4.Add(self.checkbox_4, 0, 0, 0)
        self.panel_3.SetSizer(sizer_4)
        sizer_1.Add(self.panel_3, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 10)
        sizer_2.Add(self.button_4, 0, 0, 0)
        sizer_2.Add(self.button_7, 0, 0, 0)
        sizer_2.Add(self.button_6, 0, 0, 0)
        self.panel_2.SetSizer(sizer_2)
        sizer_1.Add(self.panel_2, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 10)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade

    def enableUndo(self, value):
        self.button_5.Enable(value)
        if not value:
            state.last_action = None

    def changeRecommender(self, event): # wxGlade: Movinator.<event_handler>
        chooseRecom(event.GetSelection(), self.dba)
        reScore(self.grid_1, self.dba)

    def save(self, event): # wxGlade: Movinator.<event_handler>
        saveGrid(self.grid_1, self.dba)
        state.edited = []
        state.deleted = []
        state.new_count = 0
        self.enableUndo(False)

    def undo(self, event): # wxGlade: Movinator.<event_handler>
        if state.last_action == 1:
            self.grid_1.SetCellValue(state.last_info[0], state.last_info[1], state.last_info[2])
            mid = self.grid_1.GetRowLabelValue(state.last_info[0])
            state.edited.remove((mid, state.last_info[1]))
            paintCell(self.grid_1, mid, state.last_info[0], state.last_info[1])
#            print state.edited
        elif state.last_action == 2:
            row = state.last_info.pop(0)
            unshiftRows(self.grid_1, row)
            self.grid_1.SetRowLabelValue(row, state.last_info[0])
            for j in xrange(self.grid_1.GetNumberCols()):
                self.grid_1.SetCellValue(row, j, state.last_info[j + 1])
                paintCell(self.grid_1, state.last_info[0], row, j)
            state.deleted.remove(state.last_info[0])
#            print state.deleted
        self.enableUndo(False)

    def revert(self, event): # wxGlade: Movinator.<event_handler>
        rep = wx.ID_NO
        if len(state.edited) > 0 or len(state.deleted) > 0 or \
                state.new_count > 0:
            msg = wx.MessageDialog(self, "Revert and loose changes?", "Revert", wx.YES|wx.NO_DEFAULT)
            rep = msg.ShowModal()
        if rep == wx.ID_YES:
            state.edited = []
            state.deleted = []
            state.new_count = 0
            self.enableUndo(False)
            fillGrid(self.grid_1, self.dba)
            hideRows(self.grid_1)

    def quit(self, event): # wxGlade: Movinator.<event_handler>
        rep = wx.ID_YES
        if len(state.edited) > 0 or len(state.deleted) > 0 or \
                state.new_count > 0:
            msg = wx.MessageDialog(self, "Quit and loose changes?", "Quit", wx.YES|wx.NO_DEFAULT)
            rep = msg.ShowModal()
        if rep == wx.ID_YES:
            self.dba.closeDB()
            self.Close(True)

    def sort(self, event): # wxGlade: Movinator.<event_handler>
        if event.GetCol() >= 0:
            sortGrid(self.grid_1, event.GetCol(), False)
            self.enableUndo(False)

    def sortRev(self, event): # wxGlade: Movinator.<event_handler>
        if event.GetCol() >= 0:
            sortGrid(self.grid_1, event.GetCol(), True)
            self.enableUndo(False)

    def delete(self, event): # wxGlade: Movinator.<event_handler>
        row = self.grid_1.GetGridCursorRow()
        if isVisible(self.grid_1, row):
            if self.grid_1.GetRowLabelValue(row) not in state.deleted:
                state.deleted.append(self.grid_1.GetRowLabelValue(row))
            state.last_action = 2
            state.last_info = [row, self.grid_1.GetRowLabelValue(row)]
            for i in xrange(self.grid_1.GetNumberCols()):
                state.last_info.append(self.grid_1.GetCellValue(row,i))
            self.enableUndo(True)
            shiftRows(self.grid_1, row)
#            print state.last_info
#            print state.deleted

    def new(self, event): # wxGlade: Movinator.<event_handler>
        state.new_count = state.new_count + 1
        self.grid_1.AppendRows(1)
        self.grid_1.SetRowLabelValue(self.grid_1.GetNumberRows() - 1, "+"+ str(state.new_count))
        self.grid_1.MakeCellVisible(self.grid_1.GetNumberRows() - 1, 0)
        self.grid_1.SetGridCursor(self.grid_1.GetNumberRows() - 1, 0)
        for i in xrange(self.grid_1.GetNumberCols()):
            paintCell(self.grid_1, "+", self.grid_1.GetNumberRows() - 1, i)
        state.last_visible = self.grid_1.GetNumberRows() - 1
        self.enableUndo(False)

    def recalc(self, event): # wxGlade: Movinator.<event_handler>
        state.recom.learn()
        reScore(self.grid_1, self.dba)

    def filter1(self, event): # wxGlade: Movinator.<event_handler>
        toggleFilter(event.IsChecked(), "IT")
        hideRows(self.grid_1)
        self.enableUndo(False)

    def filter2(self, event): # wxGlade: Movinator.<event_handler>
        toggleFilter(event.IsChecked(), "OT")
        hideRows(self.grid_1)
        self.enableUndo(False)

    def filter3(self, event): # wxGlade: Movinator.<event_handler>
        toggleFilter(event.IsChecked(), "S")
        hideRows(self.grid_1)
        self.enableUndo(False)

    def filter4(self, event): # wxGlade: Movinator.<event_handler>
        toggleFilter(event.IsChecked(), "FF")
        hideRows(self.grid_1)
        self.enableUndo(False)

    def select(self, event): # wxGlade: Movinator.<event_handler>
#        print self.previous_cell, (event.GetRow(), event.GetCol()), state.last_visible, state.first_visible
        if self.ignore_select:
#            print "ignorado"
            self.ignore_select = False
            event.Skip()
            return

        if event.GetRow() > state.last_visible or \
                event.GetRow() < state.first_visible:
            return

        if isVisible(self.grid_1, event.GetRow()):
            self.previous_cell = (event.GetRow(), event.GetCol())
            event.Skip()
        else:
            dir = (self.previous_cell[0] < event.GetRow()) and 1 or -1
#            print "dir ", dir
            next_x = event.GetRow() + dir
            while next_x > 0 and next_x < self.grid_1.GetNumberRows() and\
                    not isVisible(self.grid_1, next_x):
                next_x = next_x + dir
#            print "next: ", next_x
            self.ignore_select = True
            self.previous_cell = (next_x, event.GetCol())
            self.grid_1.MakeCellVisible(next_x, event.GetCol())
            self.grid_1.SetGridCursor(next_x, event.GetCol())

    def edit(self, event): # wxGlade: Movinator.<event_handler>
        if "+" in self.grid_1.GetRowLabelValue(event.GetRow()):
            return
        self.grid_1.SetCellBackgroundColour(event.GetRow(), event.GetCol(), wx.RED)
        ed = (self.grid_1.GetRowLabelValue(event.GetRow()), event.GetCol())
        if ed not in state.edited:
            state.edited.append(ed)
        state.last_action = 1
        state.last_info = (event.GetRow(), event.GetCol(), self.last_edit)
        self.enableUndo(True)
#        print state.last_info
#        print state.edited

    def editStart(self, event): # wxGlade: Movinator.<event_handler>
        self.last_edit = self.grid_1.GetCellValue(event.GetRow(), event.GetCol())
        event.Skip()

# end of class Movinator


if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_1 = Movinator(None, -1, "")
    app.SetTopWindow(frame_1)
    frame_1.Show()
    app.MainLoop()
